{"version":3,"sources":["Components/Tile.js","Components/Form.js","App.js","index.js"],"names":["Tile","city","temperature","weatherIcon","handleDelete","className","onClick","Form","props","onSubmit","handleSubmit","type","id","autoComplete","placeholder","onChange","handleChange","handleDuration","value","error","role","length","App","useState","tilesArray","setTilesArray","undefined","currentCity","setCurrentCity","setError","duration","setDuration","useRef","useEffect","getWeather","place","tile","a","fetch","then","response","json","data","iconSelected","rangeID","weather","tilesArraysCopy","name","main","temp","icon","addTile","tilesArrayCopy2","count","catch","err","array","startRefresh","index","tilesArrayCopy","filter","splice","map","key","bind","e","preventDefault","target","reset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4baaa6f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"weather-icons/css/weather-icons.css\";\r\nimport \"./Tile.css\";\r\n\r\nconst Tile = ({ city, temperature, weatherIcon, handleDelete }) => {\r\n  return (\r\n    <div className=\"tile-container\">\r\n      <li className=\"list\">\r\n        <div className=\"button\">\r\n          <button onClick={handleDelete}>X</button>\r\n        </div>\r\n        <div className=\"city\">{city}</div>\r\n        <i className={`wi ${weatherIcon}`}></i>\r\n        <div className=\"temperature\">\r\n          {temperature}\r\n          {\"\\u00b0\"}C\r\n        </div>\r\n      </li>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Form.css\";\r\n\r\nconst Form = (props) => {\r\n  const error = () => (\r\n    <div className=\"error\" role=\"alert\">\r\n      {props.length < 4\r\n        ? \"Please enter a valid city\"\r\n        : \"You can only enter a maximum of 4 tiles\"}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <form onSubmit={props.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          id=\"city\"\r\n          autoComplete=\"off\"\r\n          placeholder=\"City\"\r\n          onChange={props.handleChange}\r\n        />\r\n        <div className=\"drop-down\">\r\n          <select onChange={props.handleDuration}>\r\n            <option value=\"interval\">(Refresh interval)</option>\r\n            <option value=\"2000\">2 s</option>\r\n            <option value=\"5000\">5 s</option>\r\n            <option value=\"10000\">10 s</option>\r\n            <option value=\"60000\">60 s</option>\r\n          </select>\r\n        </div>\r\n        <button className=\"btn btn-primary\">Get Weather</button>\r\n      </form>\r\n      {props.error ? error() : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Tile from \"./Components/Tile\";\nimport Form from \"./Components/Form\";\n\nconst App = (props) => {\n  const API = \"75fea6ed2b509f8540ec9e8fc4a13010\";\n  const [tilesArray, setTilesArray] = useState([]);\n  const [currentCity, setCurrentCity] = useState(undefined);\n  const [error, setError] = useState(false);\n  const [duration, setDuration] = useState(2000);\n  let interval = useRef;\n\n  //default\n  useEffect(() => {\n    getWeather(\"Kajang\", true);\n  }, []);\n\n  //to get weather\n  const getWeather = async (place, tile) => {\n    if (place) {\n      fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${place}&units=metric&appid=${API}`\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          setError(false);\n          let iconSelected;\n          const rangeID = data.weather[0].id;\n\n          if (rangeID >= 200 && rangeID <= 232)\n            iconSelected = \"wi-thunderstorm\";\n          else if (rangeID >= 300 && rangeID <= 321) iconSelected = \"wi-sleet\";\n          else if (rangeID >= 500 && rangeID <= 531)\n            iconSelected = \"wi-storm-showers\";\n          else if (rangeID >= 600 && rangeID <= 622) iconSelected = \"wi-snow\";\n          else if (rangeID >= 701 && rangeID <= 781) iconSelected = \"wi-fog\";\n          else if (rangeID === 800) iconSelected = \"wi-day-sunny\";\n          else if (rangeID >= 801 && rangeID <= 804)\n            iconSelected = \"wi-day-fog\";\n          else iconSelected = \"wi-day-fog\";\n\n          const tilesArraysCopy = [\n            ...tilesArray,\n            {\n              city: data.name,\n              temperature: data.main.temp,\n              icon: iconSelected,\n              duration: duration,\n              id: data.name,\n            },\n          ];\n\n          if (tile) {\n            addTile(tilesArraysCopy);\n            setError(false);\n          } else {\n            //code for refresh\n\n            setError(false);\n\n            let tilesArrayCopy2 = [...tilesArraysCopy];\n\n            tilesArrayCopy2[tilesArrayCopy2.length - 1] = {\n              city: data.name,\n              temperature: data.main.temp,\n              icon: iconSelected,\n              count: 2,\n              duration: duration,\n              id: data.name,\n            };\n\n            setTilesArray(tilesArrayCopy2);\n          }\n        })\n        .catch((err) => {\n          setError(true);\n        });\n    } else {\n      setError(true);\n    }\n  };\n\n  //add weather tile\n  const addTile = (array) => {\n    setTilesArray(array);\n    startRefresh(array);\n  };\n\n  //code for refresh\n  const startRefresh = (array) => {\n    if (array.length > 0) {\n      getWeather(array[array.length - 1].city, false);\n    }\n  };\n\n  //handle user input\n  const handleChange = (e) => {\n    e.preventDefault();\n    setCurrentCity(e.target.value);\n  };\n\n  //on get Weather button click (onSubmit)\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (tilesArray.length < 4) {\n      getWeather(currentCity, true);\n      setCurrentCity(null);\n    } else {\n      setError(true);\n    }\n    e.target.reset();\n  };\n\n  //to get refresh duration\n  const handleDuration = (e) => {\n    setDuration(e.target.value);\n  };\n\n  //to delete chosen tile\n  const handleDelete = (index) => {\n    const tilesArrayCopy = tilesArray.filter((tile) => tile !== index);\n    tilesArrayCopy.splice(index, 1);\n    setTilesArray(tilesArrayCopy);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Weather</h1>\n      {\n        <div className=\"tiles-container\">\n          <ul>\n            {tilesArray.map((tile, index) => {\n              return (\n                <Tile\n                  key={index}\n                  city={tile.city}\n                  temperature={tile.temperature}\n                  weatherIcon={tile.icon}\n                  handleDelete={handleDelete.bind(this, index)}\n                />\n              );\n            })}\n          </ul>\n        </div>\n      }\n      <div className=\"weather-form\">\n        <Form\n          error={error}\n          length={tilesArray.length}\n          handleSubmit={handleSubmit}\n          handleChange={handleChange}\n          duration={duration}\n          handleDuration={handleDuration}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}